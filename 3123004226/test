import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;

public class MainTest {

    // 测试参数验证功能
    @Test
    public void testParameterValidation() {
        // 重定向System.err以便捕获输出
        ByteArrayOutputStream errStream = new ByteArrayOutputStream();
        System.setErr(new PrintStream(errStream));

        // 测试参数不足的情况
        String[] args1 = {"orig.txt", "orig_0.8_add.txt"};
        Main.main(args1);
        assertTrue(errStream.toString().contains("参数错误！正确格式：java -jar main.jar [原文路径] [抄袭文路径] [结果路径]"));

        // 测试参数过多的情况
        errStream.reset();
        String[] args2 = {"orig.txt", "orig_0.8_add.txt", "result.txt", "extra"};
        Main.main(args2);
        assertTrue(errStream.toString().contains("参数错误！正确格式：java -jar main.jar [原文路径] [抄袭文路径] [结果路径]"));

        // 恢复System.err
        System.setErr(System.err);
    }
    // 测试文件读取功能
    @Test
    public void testReadFile() throws IOException {
        // 创建临时测试文件
        String testContent = "这是一个测试文件\n包含多行文本";
        File tempFile = File.createTempFile("test", ".txt");
        tempFile.deleteOnExit();

        // 写入测试内容
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write(testContent);
        }

        // 测试读取功能
        String content = Main.readFile(tempFile.getAbsolutePath());
        assertEquals(testContent + "\n", content); // 注意readFile会在末尾添加一个换行
    }

    // 测试文件不存在的情况
    @Test(expected = IOException.class)
    public void testReadNonExistentFile() throws IOException {
        Main.readFile("nonexistent_file_that_should_not_exist.txt");
    }

    // 测试文本预处理功能
    @Test
    public void testTextPreprocessing() {
        // 测试私有方法需要通过反射，这里通过测试calculateSimilarity间接测试
        String text = "Hello, World! 这是一个测试文本。Test 123...";
        String expected = "hello  world  这是一个测试文本  test 123   ";

        // 创建两个相同的文本，处理后应该完全匹配
        double similarity = Main.calculateSimilarity(text, text);
        assertEquals(1.0, similarity, 0.001);
    }

    // 测试分词功能
    @Test
    public void testWordSegmentation() {
        // 测试各种空白字符分割
        String text1 = "hello   world\tjava\npython";
        String text2 = "hello world java python";

        double similarity = Main.calculateSimilarity(text1, text2);
        assertEquals(1.0, similarity, 0.001);
    }

    // 测试余弦相似度计算
    @Test
    public void testCalculateSimilarity() {
        // 测试完全相同的文本
        String text1 = "这是一个测试文本";
        String text2 = "这是一个测试文本";
        assertEquals(1.0, Main.calculateSimilarity(text1, text2), 0.001);

        // 测试完全不同的文本
        text1 = "梨子 香蕉 橘子";
        text2 = "汽车 火车 飞机";
        assertEquals(0.0, Main.calculateSimilarity(text1, text2), 0.001);

        // 测试部分相似的文本
        text1 = "我 爱 中国 北京";
        text2 = "我 爱 中国 广州";
        // 相似度应为3/(√4 × √4) = 3/4 = 0.75
        assertEquals(0.75, Main.calculateSimilarity(text1, text2), 0.001);

        // 测试空文本
        text1 = "";
        text2 = "任何文本";
        assertEquals(0.0, Main.calculateSimilarity(text1, text2), 0.001);

        // 测试标点符号和大小写的影响
        text1 = "Hello, World!";
        text2 = "hello world";
        assertEquals(1.0, Main.calculateSimilarity(text1, text2), 0.001);

        // 测试其中一个文本是另一个的子集
        text1 = "a b c d e";
        text2 = "a b c";
        // 相似度应为3/(√5 × √3) ≈ 0.7746
        assertEquals(0.7746, Main.calculateSimilarity(text1, text2), 0.001);
    }

    // 测试结果写入功能
    @Test
    public void testWriteResult() throws IOException {
        // 创建临时文件
        File tempFile = File.createTempFile("result", ".txt");
        tempFile.deleteOnExit();

        // 测试写入功能
        double similarity = 0.8567;
        Main.writeResult(tempFile.getAbsolutePath(), similarity);

        // 验证写入内容
        String content = new String(Files.readAllBytes(Paths.get(tempFile.getAbsolutePath())));
        assertEquals("0.86", content);
    }

    // 测试完整流程
    @Test
    public void testFullProcess() throws IOException {
        // 创建临时文件
        File origFile = File.createTempFile("original", ".txt");
        File copyFile = File.createTempFile("copy", ".txt");
        File resultFile = File.createTempFile("result", ".txt");
        origFile.deleteOnExit();
        copyFile.deleteOnExit();
        resultFile.deleteOnExit();

        // 打印临时文件路径用于调试
        System.out.println("原始文件路径: " + origFile.getAbsolutePath());
        System.out.println("复制文件路径: " + copyFile.getAbsolutePath());
        System.out.println("结果文件路径: " + resultFile.getAbsolutePath());

        // 写入测试内容，使用try-with-resources确保正确关闭
        String origContent = "这是原始文本，包含一些内容用于测试相似度计算。";
        String copyContent = "这是复制文本，包含一些内容用于测试相似度计算。";

        try (FileWriter writer = new FileWriter(origFile)) {
            writer.write(origContent);
            writer.flush(); // 强制刷新确保内容写入
        }
        try (FileWriter writer = new FileWriter(copyFile)) {
            writer.write(copyContent);
            writer.flush(); // 强制刷新确保内容写入
        }

        // 验证文件内容是否正确写入
        String actualOrig = new String(Files.readAllBytes(origFile.toPath()));
        String actualCopy = new String(Files.readAllBytes(copyFile.toPath()));
        assertEquals("原始文件内容写入错误", origContent, actualOrig);
        assertEquals("复制文件内容写入错误", copyContent, actualCopy);

        // 执行主程序
        String[] args = {
                origFile.getAbsolutePath(),
                copyFile.getAbsolutePath(),
                resultFile.getAbsolutePath()
        };
        Main.main(args);

        // 验证结果文件是否存在
        assertTrue("结果文件未生成", resultFile.exists());
        assertTrue("结果文件为空", resultFile.length() > 0);

        // 读取并验证结果
        String content = new String(Files.readAllBytes(resultFile.toPath()));
        System.out.println("计算得到的相似度: " + content); // 打印实际结果用于调试

        try {
            double similarity = Double.parseDouble(content);
            // 检查值是否在有效范围内
            assertTrue("相似度值应在0-1之间", similarity >= 0 && similarity <= 1);
            // 调整预期阈值，使其更符合实际情况
            assertTrue("相似度低于预期", similarity > 0.4);
        } catch (NumberFormatException e) {
            fail("结果文件内容不是有效的数字: " + content);
        }
    }

}

